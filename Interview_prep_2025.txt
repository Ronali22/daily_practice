interview prep:-
====================
JAVA:-
============
OOPS[object oriented programming]
----------------------------------
Note: 
* variables=>properties, fields
* methods=>behaviours, functions
* in java every classes extends Object class by default.

1.Inheritance
--------------
->Acquiring properties from parent class to child class.
-> type
a. single inheritance-> one parent and one child class
b. multiple inheritance-> not supported (in terms of classes not supported, in terms interface supported)
c. multilevel inheritance-> one child, one parent, one grand parent class...... and so on
d. cyclic inheritance-> inter dependent classes
=> in terms of classes, java doesnot support multiple inheritance. it causes diamond problem thats why.
diamond problem: as object class is parent of every other class, when we create a child class named Vehicle, which extends two parent classes as Car, Bike. both parent classes are having a method as start(). in this scenario the java compiler will get confuse which start() method to be called.

2.Polymorphism
----------------
-> same name but different behaviour
example:- 
public int add(int a, int b){return a+b;}
public String add(String a, String b){return a+b;}
-> types
a. Run type polymorphism-> method overloading( in same class, multiple methods with same name and different arguments)
b. complie type polymorphism-> Method overriding (in different class, multiple methods with same name and same arguments)

3.Abstraction
--------------
-> Hiding unwanted implementation and providing useful methods.
-> By using abstract classes and interfaces we can achieve abstraction.
-> If a class contains atleast one abstract method, then that class is known as abstract class.
->Abstract method- a method without implementation is known as abstract method. ex: public void engineStart();

4.Encapsulation
----------------
-> Binding properties and behaviours in a single unit.
-> To achieve encapsulation we have to declare all the properties/variables/fields as 'private' and to access those we have to provide public methods, known as setters and getters.

-----------------------------------------------------------------------------------------------------------------

Example of

1. Inheritance
----------------

class Vehicle{
 	String type;
 	int identficationNumber;
}

class Car extends Vehicle{
	String company;
}

class Tata{
}
public class InheritanceExample{
	public static void main(String[]args){
		Vehicle v=new Car();
		car c= (Car) v;
	sout.println(c.company);

}
}

2. Abstraction
----------------

package com.InterviewPractice;
abstract class Animal{

	String animalType;

	public void wildAnimal(){
	
	System.out.println("wild animal spotted");

	}

	public void domesticAnimal(){
	
	System.out.println("domestic animal spotted");

	}
	
	abstract public String animalStructure();

}

class Dog extends Animal{
	private int legs;

	public void wildAnimal(){
	
	System.out.println("wild animal spotted");
	}
	
	public String animalBehavior(){
		
		System.out.println("animals barking");
		return "animalBehavior";
	}
	@Override
	public String animalStructure() {
		System.out.println("abcd");
		return "animalStructure`";
	};

}
public class Abstracton {
	public static void main(String args[]){
	Animal a1=new Dog();
	a1.domesticAnimal();
	a1.wildAnimal();
	System.out.println("-----");

}
}

3. Encapsulation:
-----------------
package com.InterviewPractice;

class Bank{
	private String userName;
	private int userId;
	private String userAddress;
	
	public void setUserName(String name) {
		this.userName=name; //this keyword is used to refer same class non static variable.
	};
	public void setUserId(int id) {
		this.userId=id;
	}
	public void setUserAddress(String add) {
		this.userAddress=add;
	}

	public String getUserName() {
		return userName;
	}
	public int getUserId() {
		return userId;
	}
	public String getUserAddress() {
		return userAddress;
	}
	public String toString() {
		return userName+" "+userId+" "+userAddress;
	}
}
public class Encapsulation {
	public static void main(String[]args) {
		Bank bank=new Bank();
		bank.setUserName("Raju");
		bank.setUserId(2024);
		bank.setUserAddress("bbsr");
		System.out.print(bank);;
		
//		System.out.println(bank.getUserName());
//		System.out.println(bank.getUserId());
//		System.out.println(bank.getUserAddress());
	}
}

4.Polymorphism:
---------------
package com.InterviewPractice;

//note- resolving method call at compile time is known as compile time polymorphism.
// resolving method call at run time is known as run time polymorphism.
class Watch{
	void digital() {
		System.out.println("buying digital watch");
	}
	void digital(int a) {
		System.out.println("buying two "+a+" set digital watch");
	}
}
class DigitalWatch extends Watch{
	@Override
	void digital() {
		System.out.println("buying new digital watch");
	}
}
public class Polymorphism {

	public static void main(String[] args) {
		Watch w=new Watch();
		w.digital();
		w.digital(2);
		
		DigitalWatch d=new DigitalWatch();
		d.digital(); 

	}

}


Exception Handling:
-------------------
-> Unwanted termination/abroption of program during normal execution is known as exception.

Types:
------
1.Unchecked exception/Run-time exception
----------------------------------------
-> The exception which can't be checked by compiler at compile time.
-> ex: ArithmaticException, NullPointerException, IndexOutOfBoundException, ClassCastException

2.Checked exception/Compile-time exception
------------------------------------------
-> The exception which can be checked by compiler at compile time.
-> ex: ClassNotFoundException, IOException(FileNotFoundException, InterruptedIOException), SQLException

--> Exception can be handlled using 1. try........catch block 2. throw and throws 3.finally block

example:1
---------------
try...catch block
----------------------
class Math {
public static void main(String[] args) {
      int a = 100;
      int b = 0;
try{
      int c = a/b;
      System.out.println(c);
} catch (Exception e) {
      System.out.println(c);
}
}
}
example:2
---------------
package com.InterviewPractice.exception;

public class ExceptionHandlingExample {

	public static void main(String[] args) {
		int a = 100;
		int b = 0;
		int c = 0;
//		try {
//			c = a / b;// risky code
//		} catch (ArithmeticException e) {
//			System.out.println("inside ArithmeticException's catch block");
//		} catch (Exception e) {
//			System.out.println("inside Exception's catch block");
//			c = c + 15;
//		} finally {
//			System.out.println("thank you");
//		}
		try {
			c = a / b;// risky code
		} catch (ArithmeticException | NullPointerException e) {//multiple exceptions can be present inn a single catch byusing "or" operator.
			System.out.println("inside catch block");
		} finally {
			System.out.println("thank you");
		}
		System.out.println(c);
		System.out.println("working");
	}

}
note: multiple catch with a single try block can be written. but the exceptions should be handled from child to parent type.

throw..........throws keyword:
-------------------------------
-> throw is used to create new exception where as throws is used to declare an exception.

example:3
-----------------
package com.InterviewPractice.exception;

//checked exception example
class DemoException extends Exception {
	DemoException() {// constructor
		System.out.println("car exception occured");
	}

	DemoException(String msg) {
		System.out.println(msg);
	}
}

//unchecked exception example
class Demo2Exception extends RuntimeException {
	Demo2Exception() {// constructor
		System.out.println("car exception occured");
	}

	Demo2Exception(String msg) {
		System.out.println(msg);
	}
}

public class ThrowAndThrowsExample {
	public static int division(int a, int b) throws DemoException{
		return a / b;
	}

	public static void main(String[] args) {
		int a = 100;
		int b = 0;
		try {
			if (b == 0) {
				throw new Demo2Exception("exception occured");
			}
			int result = division(a, b);
			System.out.println(result);

		} catch (DemoException | Demo2Exception e) {
			System.out.println("inside catch block");
		}
		System.out.println("abc");
		System.out.println("abc");
		System.out.println("abc");
		System.out.println("abc");
	}
}
---------------------------------------------------------------
multithreading:
------------------
-> thread can be created 
1. by extending Thread class
2. by implementing Runnable interface

example:1
-----------
package com.InterviewPractice.multithread;

//String userName;//varibale
//String userName();//abstract method
//String userName(){};//concrete method
//new UserName();//class obejct creation

class MyThread1 extends Thread{//creating thread using Thread class
	public void run() {
		for(int i = 1; i<=100;i++) {
			System.out.println(i);
		}
	}
}

class MyThread2 implements Runnable{//creating thread using Runnable interface

	@Override
	public void run() {
		for(int i = 1001; i<=1100;i++) {
			System.out.println(i);
		}
	}
	
}

public class MultithreadingExample {
	public static void main(String[] args) {
		MyThread1 t1 = new MyThread1();
		t1.start();
		
		MyThread2 t2 = new MyThread2();
		Thread myThread = new Thread(t2);
		myThread.start();
		
	}
}
